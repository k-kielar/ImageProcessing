        public static Bitmap MeanColor1(Bitmap bmp, int rad)
        {
            var pxlr = new Pixeler(bmp);

            int n = rad + 1;
            int d = rad * 2 + 1;
            var dys = new int[rad];
            int l = rad;
            int S = 0;
            var radsq = rad * rad;
            for (int q = 0; q < dys.Length; q++)
            {
                int i = q + 1;
                while (i * i + l * l > radsq) l--;
                dys[q] = l;
                S += l;
            }
            S = 4 * (S + rad) + 1;
            var s = S / 2 + rad + 1;

            double k = 1.0 / S;
            var ret = new Bitmap(pxlr.Width, pxlr.Height);
            var res = new Pixeler(ret);

            int qx = pxlr.Height - rad;
            int wx = pxlr.Width;
            for (int q = rad; q < qx; q++)
            {
                RawColor p;
                int sumr = 0;
                int sumg = 0;
                int sumb = 0;
                for (int w = 0; w < rad; w++)
                {
                    p = pxlr.GetPixel(w, q);
                    sumr += p.R;
                    sumg += p.G;
                    sumb += p.B;
                }
                for (int i = 0; i < dys.Length; i++)
                {
                    var dy = dys[i];
                    for (int w = 0; w < dy; w++)
                    {
                        p = pxlr.GetPixel(w, q + 1 + i);
                        var pb = pxlr.GetPixel(w, q - 1 - i);
                        sumr += p.R + pb.R;
                        sumg += p.G + pb.G;
                        sumb += p.B + pb.B;
                    }
                }

                for (int w = 0; w < wx; w++)
                {
                    var wrad = w + rad;
                    if (wrad < pxlr.Width)
                    {
                        p = pxlr.GetPixel(wrad, q);
                        sumr += p.R;
                        sumg += p.G;
                        sumb += p.B;
                    }
                    else
                    {
                        s--;
                    }
                    for (int i = dys.Length - 1; i >= 0; i--)
                    {
                        var wj = w + dys[i];
                        if (wj >= wx)
                        {
                            s -= i * 2;
                            break;
                        }
                        p = pxlr.GetPixel(wj, q + 1 + i);
                        var pb = pxlr.GetPixel(wj, q - 1 - i);
                        sumr += p.R + pb.R;
                        sumg += p.G + pb.G;
                        sumb += p.B + pb.B;
                    }

                    if (s == S)
                    {
                        res.SetPixel(w, q, new RawColor((byte)(sumr * k), (byte)(sumg * k), (byte)(sumb * k)));
                    }
                    else
                    {
                        res.SetPixel(w, q, new RawColor((byte)(sumr / s), (byte)(sumg / s), (byte)(sumb / s)));
                    }

                    wrad = w - rad;
                    if (wrad >= 0)
                    {
                        p = pxlr.GetPixel(wrad, q);
                        sumr -= p.R;
                        sumg -= p.G;
                        sumb -= p.B;
                    }
                    else
                    {
                        s++;
                    }
                    for (int i = dys.Length - 1; i >= 0; i--)
                    {
                        var wj = w - dys[i];
                        if (wj < 0)
                        {
                            s += i * 2;
                            break;
                        }
                        p = pxlr.GetPixel(wj, q + 1 + i);
                        var pb = pxlr.GetPixel(wj, q - 1 - i);
                        sumr -= p.R + pb.R;
                        sumg -= p.G + pb.G;
                        sumb -= p.B + pb.B;
                    }
                }
            }
            
            pxlr.Dispose();
            res.Dispose();
            return ret;
        }
        public static Bitmap MeanColor0(Bitmap bmp, int rad)
        {
            var pxlr = new Pixeler(bmp);

            int n = rad + 1;
            int d = rad * 2 + 1;
            var dys = new int[rad];
            int l = rad;
            int s = 0;
            var radsq = rad * rad;
            for (int q = 0; q < dys.Length; q++)
            {
                int i = q + 1;
                while (i * i + l * l > radsq) l--;
                dys[q] = l;
                s += l;
            }
            s = 4 * (s + rad) + 1;

            double k = 1.0 / s;
            var ret = new Bitmap(pxlr.Width, pxlr.Height);
            var res = new Pixeler(ret);

            int qx = pxlr.Height - rad;
            int wx = pxlr.Width - rad;
            for (int q = rad; q < qx; q++)
            {
                RawColor p;
                int sumr = 0;
                int sumg = 0;
                int sumb = 0;
                int wm = 2 * rad;
                for (int w = 0; w < wm; w++)
                {
                    p = pxlr.GetPixel(w, q);
                    sumr += p.R;
                    sumg += p.G;
                    sumb += p.B;
                }
                for (int i = 0; i < dys.Length; i++)
                {
                    var dy = dys[i];
                    wm = rad + dy;
                    for (int w = rad - dy; w < wm; w++)
                    {
                        p = pxlr.GetPixel(w, q + 1 + i);
                        var pb = pxlr.GetPixel(w, q - 1 - i);
                        sumr += p.R + pb.R;
                        sumg += p.G + pb.G;
                        sumb += p.B + pb.B;
                    }
                }

                for (int w = rad; w < wx; w++)
                {
                    p = pxlr.GetPixel(w + rad, q);
                    sumr += p.R;
                    sumg += p.G;
                    sumb += p.B;
                    for (int i = 0; i < dys.Length; i++)
                    {
                        var wj = w + dys[i];
                        p = pxlr.GetPixel(wj, q + 1 + i);
                        var pb = pxlr.GetPixel(wj, q - 1 - i);
                        sumr += p.R + pb.R;
                        sumg += p.G + pb.G;
                        sumb += p.B + pb.B;
                    }

                    res.SetPixel(w, q, new RawColor((byte)(sumr * k), (byte)(sumg * k), (byte)(sumb * k)));

                    p = pxlr.GetPixel(w - rad, q);
                    sumr -= p.R;
                    sumg -= p.G;
                    sumb -= p.B;
                    for (int i = 0; i < dys.Length; i++)
                    {
                        var wj = w - dys[i];
                        p = pxlr.GetPixel(wj, q + 1 + i);
                        var pb = pxlr.GetPixel(wj, q - 1 - i);
                        sumr -= p.R + pb.R;
                        sumg -= p.G + pb.G;
                        sumb -= p.B + pb.B;
                    }
                }
            }

            MeanRect(pxlr, res, new Rectangle(0, 0, pxlr.Width, rad), rad);
            MeanRect(pxlr, res, new Rectangle(0, pxlr.Height - rad, pxlr.Width, rad), rad);
            MeanRect(pxlr, res, new Rectangle(0, rad, rad, pxlr.Height - 2 * rad), rad);
            MeanRect(pxlr, res, new Rectangle(pxlr.Width - rad, rad, rad, pxlr.Height - 2 * rad), rad);

            pxlr.Dispose();
            res.Dispose();
            return ret;
        }
        static void MeanRect(Pixeler src, Pixeler dst, Rectangle rect, int r)
        {
            var yx = rect.Bottom;
            var xx = rect.Right;
            for (int q = rect.Top; q < yx; q++)
            {
                for (int w = rect.Left; w < xx; w++)
                {
                    dst.SetPixel(w, q, MeanColAt(new Point(w, q), src, r));
                }
            }
        }
        static RawColor MeanColAt(Point c, Pixeler pxlr, int r)
        {
            var p = pxlr.GetPixel(c.X, c.Y);
            var sums = new Pack<int, int, int, int>();
            sums.Item1 = p.R;
            sums.Item2 = p.G;
            sums.Item3 = p.B;
            sums.Item4 = 1;
            MoveH(c, c.Y, 1, pxlr.Width, pxlr, r, sums);
            MoveH(c, c.Y, -1, -1, pxlr, r, sums);
            MoveV(c, 1, pxlr.Height, pxlr, r, sums);
            MoveV(c, -1, -1, pxlr, r, sums);
            var k = 1.0 / sums.Item4;
            return new RawColor((byte)(k * sums.Item1), (byte)(k * sums.Item2), (byte)(k * sums.Item3));
        }
        static void MoveV(Point c, int dy, int br, Pixeler pxlr, int r, Pack<int, int, int, int> sums)
        {
            var rx = r * dy;
            for (int q = 0; q != rx; q += dy)
            {
                var y = c.Y + q + dy;
                if (y == br) break;
                var p = pxlr.GetPixel(c.X, y);
                sums.Item1 += p.R;
                sums.Item2 += p.G;
                sums.Item3 += p.B;
                sums.Item4++;
                MoveH(c, y, 1, pxlr.Width, pxlr, r, sums);
                MoveH(c, y, -1, -1, pxlr, r, sums);
            }
        }
        static void MoveH(Point c, int y, int dx, int br, Pixeler pxlr, int r, Pack<int, int, int, int> sums)
        {
            var ry = r * dx;
            var rsq = r * r;
            for (int w = 0; w != ry; w += dx)
            {
                var x = c.X + w + dx;
                if (x == br) break;
                if (dsq(x - c.X, y - c.Y) > rsq) break;
                var p = pxlr.GetPixel(x, y);
                sums.Item1 += p.R;
                sums.Item2 += p.G;
                sums.Item3 += p.B;
                sums.Item4++;
            }
        }
        static int dsq(int dx, int dy)
        {
            return dx * dx + dy * dy;
        }